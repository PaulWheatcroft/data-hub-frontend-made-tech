{% from './common.njk' import Pagination %}
{% from './entities.njk' import Entity %}
{% from './form.njk' import Form, MultipleChoiceField, TextField %}

{##
 # Render results filters form
 # @param {object} props - component props
 # @param {array}  props.filters - a list of form field components
 # @param {text}   [props.heading=Filter results] - filters heading text
 # @param {object} [props.sort] - object containing sorting
#}
{% macro ResultsFilters(props) %}
  {% set heading = props.heading | default('Filter results') %}

  {% if props.filters | removeNilAndEmpty | length %}
    {% call Form({
      method: 'get',
      class: 'c-filters js-AutoSubmit',
      buttonText: 'Refresh results',
      actionsClass: 'u-js-hidden',
      hiddenFields: {
        custom: true,
        sortby: props.sort.selected
      }
    }) %}
      <header class="u-clearfix">
        <h2 class="c-filters__heading">{{ heading }}</h2>
      </header>

      {{ applyMacro(props.filters) }}
    {% endcall %}
  {% endif %}
{% endmacro %}

{##
 # Render results summary
 # @param {object}   [props] - component props
 # @param {string}   [props.count] - result count
 # @param {string}   [props.el=div] - HTML element used for rendering component
 # @param {string}   [props.countLabel=result] - text to show next to count (singular)
 # @param {function} [props.buildQuery] - buidlQuery function defined on global locals
 # @param {object}   [props.filters] - an object containing selected filters
 # @param {string}   [props.highlightTerm] - text to highlight
 # @param {string}   [props.actionsHTML] - HTML content for actions block
#}
{% macro ResultsSummary(props) %}
  {% set buildQuery = buildQuery or props.buildQuery %}
  {% set el = props.el | default('div') %}
  {% set count = props.count | default('0') %}
  {% set countLabel = props.countLabel | default('result') %}
  {% set selectedFilters = props.filters | mapValues('value') | removeNilAndEmpty %}

  <{{ el }} class="c-results-summary">
    <div class="c-results-summary__row">
      <div class="c-results-summary__intro">
        <span class="c-results-summary__count">{{ count | formatNumber }}</span>
        {{ countLabel | pluralise(count) }}
        {% if props.highlightTerm or selectedFilters | length %}
          matching
          {% if props.highlightTerm %}
            <span class="u-highlight">{{ props.highlightTerm }}</span>
          {% endif %}
        {% endif %}
      </div>
      {% if selectedFilters | length > 1 or props.actionsHTML %}
        <div class="c-results-summary__actions">
          {% if selectedFilters | length > 1 %}
            <a
              href="?custom=true"
              class="c-results-summary__filter-remove-all u-float-right js-xhr"
              aria-label="Reset filter results"
            >
              Remove all filters
            </a>
          {% endif %}

          {{ props.actionsHTML | safe }}
        </div>
      {% endif %}

      {% if selectedFilters | length %}
        <div class="c-results-summary__filters">
          {% for name, value in selectedFilters %}
            {% set filter = props.filters[name] %}
            <span class="c-results-summary__filter">
              <span class="c-results-summary__filter-type">{{ filter.label }}</span>
              <span class="c-results-summary__filter-name">
                {%- if 'date' in name -%}
                  {% set date = filter.value | formatDate %}
                  {{ date if date else filter.value }}
                {%- else -%}
                  {{ filter.valueLabel }}
                {%- endif -%}
              </span>
              <a
                class="c-results-summary__filter-remove js-xhr"
                href="?{{ buildQuery(props.query, { custom: true }, [name]) }}"
                aria-label="Remove filter"
              >Ã—</a>
            </span>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    {{ ResultsSort(props | assign({ selectedFilters: selectedFilters })) }}

  </{{ el }}>
{% endmacro %}

{% macro ResultsSort(props) %}
  {% if props.items|length and (props.pagination or props.sort.options) %}
    <div class="c-results-summary__row">
      {% if props.pagination %}
        <span class="c-results-summary__page-count">
          Page {{ props.pagination.currentPage }} of {{ props.pagination.totalPages }}
        </span>
      {% endif %}

      {% if props.sort | length %}
        {% call Form({
          method: 'get',
          class: 'c-results__sort-form js-AutoSubmit',
          hideFormActions: true,
          hiddenFields: props.selectedFilters | assign({ custom: true })
        }) %}
          {{ MultipleChoiceField({
            name: 'sortby',
            label: 'Sort by',
            value: props.sort.selected,
            options: props.sort.options,
            modifier: ['small', 'inline', 'light']
          }) }}
          <button class="button button-secondary u-js-hidden">Sort</button>
        {% endcall %}
      {% endif %}
    </div>
  {% endif %}
{% endmacro %}

{##
 # Render results component
 # @param {object}  [props] - component props
 # @param {object}  [props.summaryEl] - results summary HTML element
 # @param {array{}} [props.items] - results items
 # @param {object}  [props.pagination] - results pagination
 # @param {object}  [props.filters] - object containing filters configuration
 # @param {object}  [props.sort] - object containing selected sorting and sorting options
 # @param {string}  [props.sort.selected] - selected sorting mode
 # @param {array}   [props.sort.options] - sorting options
 # @param {string}  [props.highlightTerm] - text to use to apply highlight filter
 # @param {string}   [props.summaryActionsHTML] - HTML content for actions block
#}
{% macro Results(props) %}
  <article class="c-results">
    {{ ResultsSummary(props | assign({ el: props.summaryEl, actionsHTML: props.summaryActionsHTML })) }}

    {% if props.items | length %}
      <ol class="c-entity-list">
        {% for result in props.items %}
          <li class="c-entity-list__item">
            {{ Entity(result | assign({ highlightTerm: props.highlightTerm })) }}
          </li>
        {% endfor %}
      </ol>
    {% endif %}

    {{ Pagination(props.pagination) }}
  </article>
{% endmacro %}
