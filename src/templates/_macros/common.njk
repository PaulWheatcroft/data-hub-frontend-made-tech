{##
 # Render pagination
 # @param {object} pagination - An object containing pagination properties
 # @param {boolean} [showPages=true] - A flag to enable or disable showing page numbers
 #
 # Pagination object has the following structure:
 #
 # {
 #   totalPages: 7,
 #   currentPage: 1,
 #   prev: null,
 #   next: '?page=2',
 #   pages: [
 #     { label: 1, url: '?page=1' },
 #     { label: 2, url: '?page=2' },
 #     { label: 3, url: '?page=3' },
 #     { label: 4, url: '?page=4' },
 #     { label: 'â€¦' },
 #     { label: 7, url: '?page=7' },
 #   ]
 # }
 #}
{% macro Pagination(pagination, showPages=true) %}
  {% if pagination %}
    <nav
      class="c-pagination {{ 'c-pagination--pageless' if not showPages }}"
      aria-label="pagination: total {{ pagination.totalPages }} pages"
    >
      {% if pagination.prev %}
        <a href="{{ pagination.prev }}" class="c-pagination__label c-pagination__label--prev">Previous</a>
      {% endif %}
      {% if showPages %}
        <ul class="c-pagination__list">
          {% for page in pagination.pages %}
            <li class="c-pagination__list-item">
              {% if page.url %}
                <a href="{{ page.url }}" class="c-pagination__label {{ 'is-current' if page.label == pagination.currentPage }}">
                  {{ page.label }}
                </a>
              {% else %}
                <span class="c-pagination__label c-pagination__label--truncation">
                  {{ page.label }}
                </span>
              {% endif %}
            </li>
          {% endfor %}
        </ul>
      {% endif %}
      {% if pagination.next %}
        <a href="{{ pagination.next }}" class="c-pagination__label c-pagination__label--next">Next</a>
      {% endif %}
    </nav>
  {% endif %}
{% endmacro %}

{##
 # Render page local header
 # @param {object} props - An object containing local header properties
 # @param {string} [props.heading] - page heading
 # @param {string} [props.heading] - page heading
 # @param {string} [props.headingBefore] - a string before heading (safe to render HTML)
 # @param {string} [props.headingSuffix] - a string suffix for heading (safe to render HTML)
 # @param {object} [props.actions] - an area to display actions for an entity
 # @param {object} [props.breadcrumbs] - an object containing page breadcrumbs
 # @param {object} [props.messages] - an object containing flash messages
 # @param {function} [props.caller] - Optional inner contents
 #}
{% macro LocalHeader(props) %}
  {% set breadcrumbs = props.breadcrumbs | default(BREADCRUMBS) %}
  {% set messages = props.messages | default(getMessages()) %}
  {% set modifier = props.modifier | concat('') | reverse | join(' c-local-header--') if props.modifier %}

  {% if props %}
    <header class="c-local-header {{ modifier }}" aria-label="local header">
      <div class="l-container">
        {% if breadcrumbs|length %}
          {% component 'breadcrumbs', { items: breadcrumbs } %}
        {% endif %}
        {% if messages|length %}
          {% component 'messages', { messages: messages } %}
        {% endif %}

        {% if props.actions %}
          <div class="c-local-header__content">
        {% endif %}

          {% if props.headingBefore %}
            <div class="c-local-header__heading-before">
              {{ props.headingBefore | safe }}
            </div>
          {% endif %}

          {% if props.heading %}
            <h1 class="c-local-header__heading">
              {{ props.heading }} {{ props.headingSuffix | safe }}
            </h1>
          {% endif %}

          {{ caller() if caller }}

        {% if props.actions %}
          </div>

          <div class="c-local-header__actions">
            {{ props.actions | safe }}
          </div>
        {% endif %}
      </div>
    </header>
  {% endif %}
{% endmacro %}

{##
 # Render local nav
 # @param {object} props
 # @param {string} [props.modifier] - nav modifier
 # @param {string} [props.items] - nav items
 #
 #}
{% macro LocalNav(props) %}
  {% set modifier = props.modifier | concat('') | reverse | join(' c-local-nav--') if props.modifier %}

  {% if props|length %}
    <nav class="c-local-nav {{ modifier }}" aria-label="local navigation">
      {% for item in props.items %}
        <a class="c-local-nav__link {{ 'is-active' if item.isActive }}" href="{{item.url}}">{{ item.label }}</a>
      {% endfor %}
    </nav>
  {% endif %}
{% endmacro %}

{##
 # Render global nav
 # @param {object} props
 # @param {string} [props.modifier] - nav modifier
 # @param {string} [props.items] - nav items
 #
 #}
{% macro GlobalNav(props) %}
  {% set modifier = props.modifier | concat('') | reverse | join(' c-global-nav--') if props.modifier %}
  {% set items = [] %}

  {% if props|length %}
    <nav class="c-global-nav{{ modifier }}" aria-label="global navigation">
      <div class="c-global-nav__container l-container">
        {% for item in props.items %}
          <a class="c-global-nav__link {{ 'is-active' if item.isActive }}" href="{{ item.url }}">{{ item.label }}</a>
        {% endfor %}
      </div>
    </nav>
  {% endif %}
{% endmacro %}


{##
 # Render progress bar
 # @param {object} props
 # @param {array} props.stageNames - stage names
 # @param {string} props.currentStageName - the current stages name
 #
 #}
{% macro Progress(props) %}
  {% if props.stageNames | length %}
    {% set currentStageIndex = props.stageNames.indexOf(props.currentStageName) %}
    <div class="c-progress">
      <ol class="c-progress-bar">
        {% for stageName in props.stageNames %}
          <li class="c-progress__stage
          {{- ' is-active' if props.currentStageName == stageName -}}
          {{- ' is-complete' if loop.index0 < currentStageIndex -}}"
          >
            <span class="c-progress__stage-title">{{ stageName }}</span>
          </li>
        {% endfor %}
      </ol>
    </div>
  {% endif %}
{% endmacro %}

{##
 # Render time element using from now wording
 # @param {object} props
 # @param {array} props.datetime - datetime used to generate the time from now
 #
 #}
{% macro FromNow(props) %}
  {%- if props.datetime -%}
    <time
      datetime="{{ props.datetime | formatDateTime('YYYY-MM-DDTHH:mm:ssZ') }}"
      title="{{ props.datetime | formatDateTime }}"
    >{{ props.datetime | fromNow }}</time>
  {%- endif -%}
{% endmacro %}

{##
 # Render answers summary table
 #
 # @param {object} props
 # @param {object[]|string[]} props.items - array of ojects or strings to display in table body
 # @param {string} props.items.value - item value
 # @param {string} props.items.label - item label
 # @param {string} [props.items.fallbackText] - fallback text if value is empty
 # @param {string} [props.fallbackText] - component level fallback when items is a list of strings
 # @param {string} [props.heading] - heading to use as caption for the table
 # @param {object[]} [props.actions] - array of actions to display
 # @param {string} [props.actions.url] - URL for the action
 # @param {string} [props.actions.label=Edit] - Text for the action
 # @param {caller} [caller()] - Alternative body to use
 #
 #}
{% macro AnswersSummary(props) %}
  {% if props.items or props.fallbackText or caller %}
    <table class="c-answers-summary">
      {% if props.heading or props.actions.length %}
        <caption class="c-answers-summary__heading">
          {{ props.heading }}
          {% for action in props.actions %}
            {% if action.url %}
              <a class="c-answers-summary__heading-action" href="{{ action.url }}">
                {{ action.label or 'Edit' }}
              </a>
            {% endif %}
          {% endfor %}
        </caption>
      {% endif %}

      {% if caller %}
        {{ caller() }}
      {% else %}
        <tbody>
          {% for item in props.items %}
            {% if item | isString %}
              <tr>
                <td class="c-answers-summary__content" colspan="2">{{ item }}</td>
              </tr>
            {% else %}
              {% if item.value or item.fallbackText %}
                <tr>
                  <th class="c-answers-summary__title" scope="row">{{ item.label }}</th>
                  <td class="c-answers-summary__content {{ 'c-answers-summary__content--muted' if not item.value }}">
                    {{ item.value | safe if item.value else item.fallbackText }}
                  </td>
                </tr>
              {% endif %}
            {% endif %}
          {% else %}
            <tr>
              <td class="c-answers-summary__content c-answers-summary__content--muted" colspan="2">
                {{ props.fallbackText }}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      {% endif %}
    </table>
  {% endif %}
{% endmacro %}
